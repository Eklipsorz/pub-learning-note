{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "873aa983508d6d31",
        "type": "tabs",
        "children": [
          {
            "id": "1e0de9094bba7693",
            "type": "leaf",
            "state": {
              "type": "empty",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "5591e30c8352540f",
    "type": "mobile-drawer",
    "children": [
      {
        "id": "c5238071a6e1f996",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "inbox/absolute URL：意指為特定資源在網路上的完整位置，其完整位置包含了該資源在網路上的完整位置、該資源在特定協定網路下的完整位置、該資源在特定協定網路之特定主機下的完整位置.md",
            "mode": "source",
            "source": false
          }
        }
      },
      {
        "id": "807b5d3263a5ffae",
        "type": "leaf",
        "state": {
          "type": "search",
          "state": {
            "query": "",
            "matchingCase": false,
            "explainSearch": false,
            "collapseAll": false,
            "extraContext": false,
            "sortOrder": "alphabetical"
          }
        }
      },
      {
        "id": "e0f7737a729790ba",
        "type": "leaf",
        "state": {
          "type": "tag",
          "state": {
            "sortOrder": "frequency",
            "useHierarchy": true
          }
        }
      },
      {
        "id": "7ca18c5ed2a2f887",
        "type": "leaf",
        "state": {
          "type": "starred",
          "state": {}
        }
      },
      {
        "id": "da370a0c26e73f6b",
        "type": "leaf",
        "state": {
          "type": "file-explorer",
          "state": {
            "sortOrder": "byCreatedTime"
          }
        }
      }
    ],
    "currentTab": 0
  },
  "right": {
    "id": "a4bffa3aff10e725",
    "type": "mobile-drawer",
    "children": [
      {
        "id": "8746c0e6e2d70f81",
        "type": "leaf",
        "state": {
          "type": "backlink",
          "state": {
            "collapseAll": false,
            "extraContext": false,
            "sortOrder": "alphabetical",
            "showSearch": false,
            "searchQuery": "",
            "backlinkCollapsed": false,
            "unlinkedCollapsed": true
          }
        }
      },
      {
        "id": "d88e2304aab7773b",
        "type": "leaf",
        "state": {
          "type": "outgoing-link",
          "state": {
            "linksCollapsed": false,
            "unlinkedCollapsed": true
          }
        }
      },
      {
        "id": "de4733973b8c15ab",
        "type": "leaf",
        "state": {
          "type": "outline",
          "state": {}
        }
      },
      {
        "id": "11ee2b65fab83617",
        "type": "leaf",
        "state": {
          "type": "review-queue-list-view",
          "state": {}
        }
      }
    ],
    "currentTab": 0
  },
  "active": "1e0de9094bba7693",
  "lastOpenFiles": [
    "inbox/absolute URL：意指為特定資源在網路上的完整位置，其完整位置包含了該資源在網路上的完整位置、該資源在特定協定網路下的完整位置、該資源在特定協定網路之特定主機下的完整位置.md",
    "inbox/useEffect 在class-based component 的實現是在compoentDidMount、componentDidUpdate、componentWillUnmount來進行對應的實現.md",
    "inbox/functional component寫法流行是因為彈性、短小、易讀；class-based component則是個人喜好、工作團隊、建立error boundary.md",
    "inbox/在JS中，class 內部定義static method 或者 static property，代表著已經在執行前分配好記憶體給method或者property，換言之，就是不透過執行物件的實例化過程來分配.md",
    "inbox/React：context object 在 class-based component 的使用案例.md",
    "inbox/React：useEffect 對於class-based-component的轉換案例- UserFinder.js 的class-based component 實現.md",
    "inbox/React：class-based component 存取context object的方法有兩種-第一個是使用consumer；第二個是使用元件類別下的contextType屬性 + this.context.xxx 來存取.md",
    "inbox/若一個函式呼叫存在多個this-binding方法的話，那麼this會由誰來決定：explicit binding > implicit binding > default binding 和 new binding > implicit binding > default binding.md",
    "inbox/箭頭函式的this binding是使用語彙綁定(lexical binding)，具體是透過箭頭函式內EC的outer reference往上找上一個EC擁有的this來設定箭頭函式本身的this，且一旦設定，就無法被覆寫.md",
    "inbox/當執行Bytecode來決定this binding時，若是遇到：非箭頭函式呼叫，就分別以new binding、implicit binding、explicit binding、default binding來決定他們函式呼叫時的this 是什麼；箭頭函式呼叫，就以語彙綁定.md"
  ]
}