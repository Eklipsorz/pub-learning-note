{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "5bca85b3fbe1d2cd",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "Untitled.md",
            "mode": "source",
            "source": false
          }
        }
      },
      {
        "id": "ff176b62b3b40446",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "develop/以write-miss為主的策略有write around 和allocate on write，兩者皆對資料庫進行寫入，前者是不同步緩存，後者是同步緩存.md",
            "mode": "source",
            "source": false
          }
        }
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "aae06c38208a1036",
    "type": "split",
    "children": [
      {
        "id": "85a59d2c54c575cc",
        "type": "tabs",
        "children": [
          {
            "id": "d9546d4d0b544fb7",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {}
            }
          },
          {
            "id": "423a385f7547e8c2",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "props",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 477
  },
  "right": {
    "id": "acffa8a6b0911db3",
    "type": "split",
    "children": [
      {
        "id": "b058356d42c47057",
        "type": "tabs",
        "children": [
          {
            "id": "a6555039f4ed3291",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "Untitled.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3cf7a667459c6b46",
            "type": "leaf",
            "state": {
              "type": "review-queue-list-view",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "active": "5bca85b3fbe1d2cd",
  "lastOpenFiles": [
    "develop/React/React：將component 視為函式來呼叫，以資料來當函式的參數，最後處理的結果會是對應資料的渲染畫面.md",
    "develop/React/React：在JSX中，將css當作js看待並執行，把css納入至importing module會用到的資源區塊中.md",
    "develop/以write-miss為主的策略有write around 和allocate on write，兩者皆對資料庫進行寫入，前者是不同步緩存，後者是同步緩存.md",
    "develop/React/React：資料和畫面的切分第一步驟是用{}以及在其內部JavaScript表達式來切分.md",
    "develop/React/前端框架放置靜態資源的地方為public和src目錄下的assets，前者並不會受到webpack給處理，後者可能會因模組依賴關係圖而跟著被轉換和處理.md",
    "develop/React/React：create-react-app 專案下的npm run command.md",
    "develop/React/React的create-react-app 預設會隱藏與開發無關的檔案和無用的模組安裝依賴關係，若要停止隱藏就執行npm run eject.md",
    "Untitled 1.md",
    "develop/OS/Side Effect 是強調著特定操作、表達式、函式的處理過程，除了會影響自身所處於的執行環境以外，還會影響其他環境下本身或者其環境下的資料，如全域變數、共享用的資源.md",
    "MOC/OS MOC.md"
  ]
}