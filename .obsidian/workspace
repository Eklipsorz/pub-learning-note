{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "a1dca65757e5552e",
        "type": "leaf",
        "state": {
          "type": "empty",
          "state": {}
        }
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "be60b8d193d492ac",
    "type": "mobile-drawer",
    "children": [
      {
        "id": "5cb9705b6bb8e3b4",
        "type": "leaf",
        "state": {
          "type": "file-explorer",
          "state": {}
        }
      },
      {
        "id": "a318af7e482d40e1",
        "type": "leaf",
        "state": {
          "type": "search",
          "state": {
            "query": "",
            "matchingCase": false,
            "explainSearch": false,
            "collapseAll": false,
            "extraContext": false,
            "sortOrder": "alphabetical"
          }
        }
      }
    ],
    "currentTab": 0
  },
  "right": {
    "id": "8afeaf46bbf997b6",
    "type": "mobile-drawer",
    "children": [
      {
        "id": "f9a9529a95714827",
        "type": "leaf",
        "state": {
          "type": "backlink",
          "state": {
            "collapseAll": false,
            "extraContext": false,
            "sortOrder": "alphabetical",
            "showSearch": false,
            "searchQuery": "",
            "backlinkCollapsed": false,
            "unlinkedCollapsed": true
          }
        }
      },
      {
        "id": "f442ce4dd5c34ffb",
        "type": "leaf",
        "state": {
          "type": "review-queue-list-view",
          "state": {}
        }
      }
    ],
    "currentTab": 0
  },
  "active": "a1dca65757e5552e",
  "lastOpenFiles": [
    "inbox/React： 針對useReducer 所擁有的大狀態下的一小部分狀態來作為useEffect的depenedency，並且它們只要變動的話，就會在updating階段觸發時檢查到dependency變動而執行callback.md",
    "inbox/useState使用場景運用在狀態間並無關係且狀態更新較為單一簡單，useReducer使用場景運用在狀態間有關係且狀態更新較為複雜.md",
    "develop/React/React：Context API.md",
    "develop/React/React：使用如Redux或者Context這種集中狀態機制是為了讓多個元件下能夠彼此共享狀態和彼此觸發渲染週期.md",
    "inbox/React：具體如何利用lifting state up 概念 + pass state data via pros概念來實現從child元件傳遞資訊至parent元件，並讓parent元件處理和渲染.md",
    "develop/React/React：在還沒有使用Redux或者Context之前，parent 元件傳遞資訊至child元件處理是使用props概念來實現，而child元件傳遞資訊給parent元件處理是使用props概念和callback.md",
    "templates/💻.md",
    "inbox/React：useReducer 是React 內建的HOOK，最主要是以多個狀態歸納成一個大狀態 的方式來控管狀態.md",
    "templates/🧠.md",
    "templates/📝.md"
  ]
}