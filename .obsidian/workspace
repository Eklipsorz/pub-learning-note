{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "bd76b838eb158995",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "以write-miss為主的策略有write around 和allocate on write，兩者皆對資料庫進行寫入，前者是不同步緩存，後者是同步緩存.md",
            "mode": "source"
          }
        }
      },
      {
        "id": "d69cdc1edf04d96a",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "以write-miss為主的策略有write around 和allocate on write，兩者皆對資料庫進行寫入，前者是不同步緩存，後者是同步緩存.md",
            "mode": "preview"
          }
        }
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "c14f85f051c47b19",
    "type": "split",
    "children": [
      {
        "id": "cb59ae0977574a2f",
        "type": "tabs",
        "children": [
          {
            "id": "6cafff7fd047a3d6",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {}
            }
          },
          {
            "id": "d2335b6cc36453b9",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "記憶體成本",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 620.5
  },
  "right": {
    "id": "818cdd2c8d559c63",
    "type": "split",
    "children": [
      {
        "id": "d660f5648f3292d8",
        "type": "tabs",
        "children": [
          {
            "id": "dc2c437bbcb9c81a",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "以write-miss為主的策略有write around 和allocate on write，兩者皆對資料庫進行寫入，前者是不同步緩存，後者是同步緩存.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "1d6a45ea9d33bb93",
            "type": "leaf",
            "state": {
              "type": "review-queue-list-view",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "active": "bd76b838eb158995",
  "lastOpenFiles": [
    "以write-miss為主的策略有write around 和allocate on write，兩者皆對資料庫進行寫入，前者是不同步緩存，後者是同步緩存.md",
    "以write-hit為主的write through和write back(write behind)這兩種寫入策略通常會為了一致性而與資料庫同步資料.md",
    "MOC/Caching Strategy MOC.md",
    "cache hit為主的方法是從緩存存取資料但很容易被人忽略同步問題，cache miss為主的方法是從資料庫讀取資料但能選擇同步.md",
    "MOC/Express MOC.md",
    "develop/Redis- String適用場景為讀取場景較多，且更新快取不頻繁；Hash適用場景為更新較為頻繁(尤其是指定特定key)，或者讀取特定key值.md",
    "MOC/Redis MOC.md",
    "MOC/JSONPath MOC.md",
    "假設某個資料存在Redis，當我在後端更新了資料，如何保證客戶端讀取的是最新的資料？.md",
    "inline Caching 是客戶端直接以cache為主要儲存系統的風格 ，Look-Aside Caching 則是先以cache來處理，再來以DB作處理的風格.md"
  ]
}