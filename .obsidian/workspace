{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "574ceb465b469dc8",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "inbox/React：useCallback 最主要是透過將指定函式儲存在記憶體並於每一次元件的渲染函式被觸發執行時，就將記憶體的指定函式回傳給元件使用.md",
            "mode": "source",
            "source": false
          }
        }
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "184c5734690b3c9c",
    "type": "split",
    "children": [
      {
        "id": "4680111e485df9e0",
        "type": "tabs",
        "children": [
          {
            "id": "6941822edf359a99",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "this.setState({",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "b7ac353bc18ac458",
            "type": "leaf",
            "state": {
              "type": "starred",
              "state": {}
            }
          },
          {
            "id": "673bafcf0104f9cf",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {}
            }
          }
        ],
        "currentTab": 2
      }
    ],
    "direction": "horizontal",
    "width": 481
  },
  "right": {
    "id": "1b728af4a278cee2",
    "type": "split",
    "children": [
      {
        "id": "91704a7a3c315761",
        "type": "tabs",
        "children": [
          {
            "id": "b1f7a905b774f5e4",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "inbox/React：useCallback 最主要是透過將指定函式儲存在記憶體並於每一次元件的渲染函式被觸發執行時，就將記憶體的指定函式回傳給元件使用.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3fbbeb2a69d755ad",
            "type": "leaf",
            "state": {
              "type": "review-queue-list-view",
              "state": {}
            }
          },
          {
            "id": "023097852c3467d6",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "inbox/React：useCallback 最主要是透過將指定函式儲存在記憶體並於每一次元件的渲染函式被觸發執行時，就將記憶體的指定函式回傳給元件使用.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "bcfa94e5fcde6a0e",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "10e975eb097c2cce",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "inbox/React：useCallback 最主要是透過將指定函式儲存在記憶體並於每一次元件的渲染函式被觸發執行時，就將記憶體的指定函式回傳給元件使用.md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "active": "574ceb465b469dc8",
  "lastOpenFiles": [
    "inbox/React：由於useCallback會是回傳函式物件，所以會透過函式物件特有的closure來對應執行時間點下的渲染函式所產生出來的記憶體區塊.md",
    "inbox/React：useCallback 最主要是透過將指定函式儲存在記憶體並於每一次元件的渲染函式被觸發執行時，就將記憶體的指定函式回傳給元件使用.md",
    "inbox/JS：由於物件本身會因為屬性會在執行期間進行任何變動，所以會將物件內容本身儲存在heap記憶體區塊，然後並於stack記憶體區塊儲存對應heap 記憶體位址.md",
    "inbox/(草稿)views 那邊目錄是指的是瀏覽器代替我們發送請求至伺服器，伺服器會負責產出頁面，這時它會參考views和資料來做，做完就回傳給瀏覽器瀏覽器屆時收到就將請求回應和端點打造成檔案.md",
    "inbox/JavaScript 的 primitive data value 和 reference value 本身並不會有執行過程會變更大小的需求，所以會存放於stack記憶體區塊，並用變數名稱作為其區塊的識別名稱.md",
    "inbox/React.memo 適用場景為不常變更的元件內容、規模較大的專案，不適用場景為時常變更的元件、props為基礎來重複使用的元件、規模較小的專案.md",
    "MOC/React MOC.md",
    "inbox/React.memo 效能成本取決於儲存空間成本和計算成本，前者會是props數量、對應元件的Virtual DOM結構、其descendant component的Virtual DOM結構，後者會是props比對成本.md",
    "inbox/React.memo 比對方式會採用於JS的currProp === prevProp 而衍生出props對應著物件的元件a會因為渲染函式一直邊呼叫邊重建物件而無法讓元件a能夠正常使用memo.md",
    "inbox/JS：在發生比較時，若識別字是對應著primitive data type的內容，會直接將識別字解析成其內容；若識別字是對應著物件，會直接將識別字解析成其物件所在的記憶體位址.md"
  ]
}