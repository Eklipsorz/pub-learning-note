{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "e5d8c59b3c70d8e9",
        "type": "leaf",
        "state": {
          "type": "markdown",
          "state": {
            "file": "develop/緩存用來決定哪些資料區塊先被釋放的演算法：LRU、LFU、FIFO.md",
            "mode": "source"
          }
        }
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "66416f18f29f34fa",
    "type": "split",
    "children": [
      {
        "id": "42a59f4bf034c0cb",
        "type": "tabs",
        "children": [
          {
            "id": "adddaf817b9157f2",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {}
            }
          },
          {
            "id": "adf600677adb91a9",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "Least Recently",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 369.5
  },
  "right": {
    "id": "22f1abebee47890e",
    "type": "split",
    "children": [
      {
        "id": "d5f1f2a4e417c6ed",
        "type": "tabs",
        "children": [
          {
            "id": "e51959da82f4dbd1",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "develop/緩存用來決定哪些資料區塊先被釋放的演算法：LRU、LFU、FIFO.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "f2886ad285f31bd5",
            "type": "leaf",
            "state": {
              "type": "review-queue-list-view",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "active": "e5d8c59b3c70d8e9",
  "lastOpenFiles": [
    "develop/緩存用來決定哪些資料區塊先被釋放的演算法：LRU、LFU、FIFO.md",
    "develop/inline Caching 是客戶端直接以cache為主要儲存系統的風格 ，Look-Aside Caching 則是先以cache來處理，再來以DB作處理的風格.md",
    "develop/客戶端每當發送請求時，會根據請求的Domain會是什麼而根據cookie上 Domain欄位來添加對應的cookie內容至請求封包.md",
    "develop/Redis Hash是儲存多個key-value的字典.md",
    "develop/belazy-shop-sideproject/驗證字串內容原本是否為數字字串的方法就是先將比對值以Number轉換，接著再以其結果轉換String比對原本轉換前的內容是否一致，一致則為Number String.md",
    "develop/belazy-shop-sideproject/驗證字串內容原本是否為日期字串的方法就是先將比對值以Number轉換，接著再以其結果轉換String比對原本轉換前的內容是否一致，一致則為Number String.md",
    "develop/SQL/Database - Lazy Loading 是當索求需求來臨時才會索求特定資料，且不會把結果儲存，其餘時間點都維持不執行索求.md",
    "develop/SQL/Database - Eager loading 是指主動索求未來會用到的資料集合並將結果放入特定空間，然後透過儲存結果來處理，以減緩不必要的處理.md",
    "develop/SQL/SQL 中的Query 是向資料庫索要特定資料的請求或者詢問.md",
    "develop/SQL/Database - N + 1 Queries Problem當向資料庫發送一筆Query來索要特定集合的N筆紀錄，那麼會因沒事先紀錄與特定集合相關連的集合而發送N+1筆Queries來實現.md"
  ]
}