{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "e675918799a1a4eb",
        "type": "tabs",
        "children": [
          {
            "id": "397b1abbf8333bb7",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "dev-practice/Practice - React：food-order project 建立order所需要做的處理.md",
                "mode": "source",
                "source": false
              }
            }
          },
          {
            "id": "79a49d4af35ad5fc",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "inbox/React：food-order project  建立order所需要做的處理.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "184c5734690b3c9c",
    "type": "split",
    "children": [
      {
        "id": "4680111e485df9e0",
        "type": "tabs",
        "children": [
          {
            "id": "6941822edf359a99",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "請至/react-builder/question-review/food-order-project-question領取題目並切換至develop-checkout-form 分支，實現一個checkout form 會有的功能-付款功能、付款資料表單和按鈕之間的切換、付款成功的視窗、付款載入狀況、付款錯誤顯示",
                "matchingCase": true,
                "explainSearch": false,
                "collapseAll": true,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "b7ac353bc18ac458",
            "type": "leaf",
            "state": {
              "type": "starred",
              "state": {}
            }
          },
          {
            "id": "dba5e16eed67c4ca",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "byCreatedTime"
              }
            }
          },
          {
            "id": "2783517be647e26d",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 271.5
  },
  "right": {
    "id": "1b728af4a278cee2",
    "type": "split",
    "children": [
      {
        "id": "91704a7a3c315761",
        "type": "tabs",
        "children": [
          {
            "id": "b1f7a905b774f5e4",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "dev-practice/Practice - React：food-order project 建立order所需要做的處理.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "023097852c3467d6",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "dev-practice/Practice - React：food-order project 建立order所需要做的處理.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "bcfa94e5fcde6a0e",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "10e975eb097c2cce",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "dev-practice/Practice - React：food-order project 建立order所需要做的處理.md"
              }
            }
          },
          {
            "id": "de133f679a2497dd",
            "type": "leaf",
            "state": {
              "type": "review-queue-list-view",
              "state": {}
            }
          }
        ],
        "currentTab": 4
      }
    ],
    "direction": "horizontal",
    "width": 200,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "obsidian-spaced-repetition:Review flashcards": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false,
      "switcher:Open quick switcher": false
    }
  },
  "active": "397b1abbf8333bb7",
  "lastOpenFiles": [
    "inbox/React：food-order project  建立order所需要做的處理.md",
    "dev-practice/Practice - React：food-order project 建立order所需要做的處理.md",
    "inbox/當在async 函式內碰到指定await promise指派給特定識別字時，await會以分配記憶體來定義存放resolve的結果值，並賦予其識別字1，再以promise.then來設定resolve的結果值指派給識別字1所對應的內容.md",
    "develop/React/React：forwardRef + useImperativeHandler 實現由parent元件的ref去呼叫child元件所提供的方法.md",
    "dev-practice/Practice - React：forwardRef + useImperativeHandler 實現由parent元件的ref去呼叫child元件所提供的方法.md",
    "inbox/node.js 透過node-redis程式來與redis server連線並下達對應資料庫指令.md",
    "develop/React/React：chart 案例.md",
    "inbox/gsutil 是用來遠端操控Cloud Storage的工具.md",
    "inbox/Google Cloud Memorystore 是以提供記憶體儲存空間為主的服務.md",
    "inbox/瀏覽器發送後端請求，回應之前，會先有預設畫面瀏覽給客戶端來增加使用體驗，而非等到回應才渲染，隨後等到回應到來後，就重新渲染.md",
    "develop/React/React：表格製作的難點為表格本身具有較多狀態要管理和控制.md",
    "develop/JavaScript/JS 物件上的屬性名稱可以是字串、單純名稱、單純數字，至於開放原因為：屬性名稱本質上是字串，只是額外開放其他可以直接被轉換成字串的資料型別來表示屬性名稱.md",
    "inbox/Database Replication  是將資料進行同結構同內容的複製來製作成多個副本分發至其他系統上.md",
    "develop/React/React：useEffect 和 生命週期兩者是不一樣的，它的運作原理更像是資料上的同步化：將源自於props、state等其他地方的資料轉換成對應畫面並從中藉使畫面呈現的資料弄成一樣.md",
    "develop/React/React： 若狀態是以參照位址為主，setState很有可能會誤判並認為沒有更新就不會做觸發.md",
    "inbox/React：useMemo 最主要是將特定值或者執行特定performance-intensive task所得到的特定值儲存起來，並根據情況來將儲存的特定值回傳.md",
    "develop/React/Virtual DOM是從對應Real DOM結構抽離出僅描述對應畫面的DOM結構，本身用途為藍圖使用，會比較每個畫面的差異，依照差異來生成對應的Real DOM渲染.md",
    "develop/React/擁有deps機制的hook擁有特性共同有的特性：利用deps機制來做效能優化、優化手段會是以儲存deps資訊來比較當前deps為主、優化手段中若選擇忽略不執行hook通常會是以過去處理過的結果來回傳.md",
    "develop/JavaScript/JS class 建構式是每個類別的特殊方法，用來根據資訊來建立對應類別下物件並初始化，若沒設定的話，系統會預設設定指定的constructor給開發者來執行.md",
    "inbox/React：使用Fetch API來發送請求來增加資料.md",
    "develop/Language/first-class citizen 為一種實體，可以在特定程式語言下被當作是物件或值來看待，並且可以用物件和值所支援的操作來將實體和其他物件或值進行處理.md",
    "inbox/redis 分散式鎖 - 釋放.md",
    "draft/Belazy - 庫存量只有讀取和管理修改庫存量才會直接執行檢查和同步資料庫.md",
    "draft/session 和 redis 會根據cookie是否設定expires來順便設定對應session的過期時間.md",
    "inbox/Cloud Build要付費才能啟用private pool來與VPC下的 redis 連接.md",
    "inbox/error boundary 如同其名，專門處理定義錯誤的範疇、攔截、處理的元件，會以warpper component來包覆著多個後裔元件並攔截這些元件在渲染方法和生命週期方法下的錯誤.md",
    "develop/css-style",
    "develop/browser",
    "draft",
    "dev-practice",
    "develop/dns",
    "develop/win-development",
    "develop/authentication/Refresh-token",
    "develop/authentication/OpenID-Connect",
    "develop/authentication/OAuth/Untitled",
    "develop/authentication/OAuth",
    "Pasted image 20230119210755.png"
  ]
}