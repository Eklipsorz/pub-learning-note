{
  "main": {
    "id": "6d8cc76c7f85bcaa",
    "type": "split",
    "children": [
      {
        "id": "7c6d2d2731ef9feb",
        "type": "tabs",
        "children": [
          {
            "id": "0df4a2c114364ca9",
            "type": "leaf",
            "state": {
              "type": "empty",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "184c5734690b3c9c",
    "type": "split",
    "children": [
      {
        "id": "a387ae7ea2f4e395",
        "type": "split",
        "children": [
          {
            "id": "4680111e485df9e0",
            "type": "tabs",
            "children": [
              {
                "id": "6941822edf359a99",
                "type": "leaf",
                "state": {
                  "type": "search",
                  "state": {
                    "query": "",
                    "matchingCase": false,
                    "explainSearch": false,
                    "collapseAll": true,
                    "extraContext": false,
                    "sortOrder": "alphabetical"
                  }
                }
              },
              {
                "id": "b7ac353bc18ac458",
                "type": "leaf",
                "state": {
                  "type": "starred",
                  "state": {}
                }
              },
              {
                "id": "673bafcf0104f9cf",
                "type": "leaf",
                "state": {
                  "type": "file-explorer",
                  "state": {
                    "sortOrder": "byCreatedTime"
                  }
                }
              }
            ],
            "currentTab": 2
          },
          {
            "id": "5602d54004e2edfd",
            "type": "tabs",
            "children": [
              {
                "id": "db84f66ae4dbc429",
                "type": "leaf",
                "state": {
                  "type": "markdown",
                  "state": {
                    "file": "inbox/React：custom hook 在component使用就如同函式呼叫那樣使用，其搭載的hook和custom hook會註冊在該component上.md",
                    "mode": "source",
                    "source": false
                  }
                }
              }
            ]
          },
          {
            "id": "05cc1d91742c244c",
            "type": "tabs",
            "children": [
              {
                "id": "abe8a326d83cafb8",
                "type": "leaf",
                "state": {
                  "type": "markdown",
                  "state": {
                    "file": "develop/Express/Express Server 錯誤處理的順序.md",
                    "mode": "source",
                    "source": false
                  }
                }
              }
            ]
          },
          {
            "id": "c28a3a703c22d939",
            "type": "tabs",
            "children": [
              {
                "id": "f9a076ecf8ead470",
                "type": "leaf",
                "state": {
                  "type": "markdown",
                  "state": {
                    "file": "inbox/React Element 主要有兩種開發方法：第一個是functional component；第二個則是class-based component.md",
                    "mode": "source",
                    "source": false
                  }
                }
              }
            ]
          }
        ],
        "direction": "vertical"
      }
    ],
    "direction": "horizontal",
    "width": 1536
  },
  "right": {
    "id": "1b728af4a278cee2",
    "type": "split",
    "children": [
      {
        "id": "91704a7a3c315761",
        "type": "tabs",
        "children": [
          {
            "id": "b1f7a905b774f5e4",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "inbox/React Element 主要有兩種開發方法：第一個是functional component；第二個則是class-based component.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3fbbeb2a69d755ad",
            "type": "leaf",
            "state": {
              "type": "review-queue-list-view",
              "state": {}
            }
          },
          {
            "id": "023097852c3467d6",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "inbox/React Element 主要有兩種開發方法：第一個是functional component；第二個則是class-based component.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "bcfa94e5fcde6a0e",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "10e975eb097c2cce",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "inbox/React Element 主要有兩種開發方法：第一個是functional component；第二個則是class-based component.md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 200,
    "collapsed": true
  },
  "active": "f9a076ecf8ead470",
  "lastOpenFiles": [
    "develop/Express/Express Server 錯誤處理的順序.md",
    "inbox/React：custom hook 在component使用就如同函式呼叫那樣使用，其搭載的hook和custom hook會註冊在該component上.md",
    "inbox/React：layout component 會是以元件來表示一個多個固定元件的固定擺放配置，並允許接收props資訊來從其他元件中接收資訊並來構成適合該元件使用的元件.md",
    "develop/React/class-based-component/useEffect 的運行模式可用compoentDidMount、componentDidUpdate、componentWillUnmount來進行對應的實現.md",
    "develop/React/React Unmounting 階段是指特定元件的實際DOM節點從實際DOM Tree被移除的階段.md",
    "develop/React/class-based-component/React：class-based component 存取context object的方法有兩種-第一個是使用consumer；第二個是使用元件類別下的contextType屬性 + this.context.xxx 來存取.md",
    "develop/React/React：useEffect & Dependencies 之間關係就在於每一次在updating階段時effect被觸發時會檢查是否有任一dependency有改變而執行對應的callback.md",
    "develop/React/React：Effect 等同於 Side Effect，effect 本身是指執行主要處理(結果)所帶來的任意額外處理(結果)，主要處理(結果)會是指元件渲染(render)任務。任意額外處理(結果)指useEffect所定義的執行處理.md",
    "develop/render/Specificity 是一個算法，專門在n個相同declaration且這些declaration所處的selector所指向的dom是一樣的情況下，憑著declaration所處的selector  對於dom節點的描述程度高低來決定哪個declaration採用至對應dom.md",
    "inbox/React：使用dynamic inline style 來根據執行情況於元件下設定該元件的style.md"
  ]
}